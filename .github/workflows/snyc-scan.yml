name: Snyk vulnerability reports manual

on:
  workflow_dispatch:

env:
  APP_ENGINE_REPO: entando/app-engine
  APP_ENGINE_BRANCH: develop
#  CATALYST_INFRA_TEMPLATES_REPO: entando/catalyst-infra-templates
  CATALYST_INFRA_TEMPLATES_REPO: BrenoQVDS/catalyst-infra-templates
  SNYK_SCAN_MATRIX_CONFIG_URL: global-config/snyk-scan-matrix.json
  SNYK_SCAN_BUILD_POM_SCRIPT_URL: scripts/snyk-scan-build-pom.sh
  SNYK_SCAN_POM_TEMPLATE_CONFIG_URL: templates/snyc-scan-pom.tpl

jobs:
  output-setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      build_pom_script: ${{ steps.set-build-pom-script.outputs.build_pom_script }}
      pom_template: ${{ steps.set-pom-template.outputs.pom_template }}
    steps:
    # Checkout the catalyst-infra-templates repository
    - name: Checkout catalyst-infra-templates
      uses: actions/checkout@v3
      with:
        repository: ${{ env.CATALYST_INFRA_TEMPLATES_REPO }}
#        token: ${{ secrets.ENTANDO_BOT_TOKEN }}
        
    # Load snyk-scan-matrix.json file
    - name: Load snyk-scan-matrix.json
      id: set-matrix
      run: |
        echo "matrix=$(jq -c . < $SNYK_SCAN_MATRIX_CONFIG_URL)" >> $GITHUB_OUTPUT
        
    # Load snyk-scan-build-pom.sh file
    - name: Load snyk-scan-build-pom.sh
      #Remove later
      continue-on-error: true
      id: set-build-pom-script
      run: |
        echo "build_pom_script=$(cat $SNYK_SCAN_BUILD_POM_SCRIPT_URL)" >> $GITHUB_OUTPUT
#        echo ::set-output name=build_pom_script::$(cat $SNYK_SCAN_BUILD_POM_SCRIPT_URL)
#        echo "build_pom_script=$(<$SNYK_SCAN_BUILD_POM_SCRIPT_URL)" >> $GITHUB_OUTPUT
        
    # Load snyc-scan-pom.tpl file
    - name: Load snyc-scan-pom.tpl
      #Remove later
      continue-on-error: true
      id: set-pom-template
      run: |
        echo "pom_template=$(cat $SNYK_SCAN_POM_TEMPLATE_CONFIG_URL)" >> $GITHUB_OUTPUT
#        echo ::set-output name=pom_template::$(cat $SNYK_SCAN_POM_TEMPLATE_CONFIG_URL)
#        echo "pom_template=$(<$SNYK_SCAN_POM_TEMPLATE_CONFIG_URL)" >> $GITHUB_OUTPUT
        
  scan-matrix:
    needs: output-setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.output-setup.outputs.matrix)}}
      fail-fast: false #change to true later
      max-parallel: 10
    steps:
    - name: Checkout project
      uses: actions/checkout@v3
      with:
        repository: ${{ matrix.repo }}
        ref: ${{ matrix.branch }}
    - name: Scan vulnerabilities with snyk
      run: |
        ${{ needs.output-setup.outputs.build_pom_script }} > input.file
        while IFS= read -r line
        do
          echo "$line"
        done < input.file
        ${{ needs.output-setup.outputs.pom_template }} > input.file
        while IFS= read -r line
        do
          echo "$line"
        done < input.file
        pwd
        cd scan-prj
        pwd
        bash build-pom.sh
        npm install snyk -g
        snyk auth ${{ secrets.SNYK_TOKEN }}
        snyk test >> snyk-results.txt || true
        BRANCH=$(echo ${{ matrix.branch }} | sed -r 's;/+;_;g')
        REPO_NAME=$(echo "${{ matrix.repo }}" | awk -F '/' '{print $2}')
        REPORT_FILE_NAME=$BRANCH-$REPO_NAME.csv
        echo $REPORT_FILE_NAME
        echo "Vulnerable Library, Vulnerability Type, Severity, Current Version, Fix Version, Fix Type (Update/Explicity/No Fix), Details" > $REPORT_FILE_NAME
        LINE_NUM=1
        while read LINE
        do
          if [[ $LINE == Upgrade* ]]
          then
            VULNERABLE_LIB_VERSION_FIX=$(echo "${LINE}" | awk -F '@' '{print $3}' | awk -F ' ' '{print $1}')
            VULNERABLE_LIB_VERSION_FIX=$(echo $VULNERABLE_LIB_VERSION_FIX | sed -r 's|,|;|g')
            FIX_TYPE="Update"
            ISSUES_WITH_NO_DIRECT_UPGRADE=false
          elif [[ $LINE == ✗* ]]
          then
            VULNERABILITY_TYPE=$(echo "${LINE}" | awk -F '✗ ' '{print $2}' | awk -F ' \\[' '{print $1}')
            VULNERABILITY_SEVERITY=$(echo "${LINE}" | awk -F '[' '{print $2}' | awk -F ' ' '{print $1}')
            VULNERABILITY_SNYK_LINK=$(echo "${LINE}" | awk -F '[' '{print $3}' | awk -F ']' '{print $1}')
          elif [[ $LINE == "Issues with no direct upgrade"* ]]
          then
            ISSUES_WITH_NO_DIRECT_UPGRADE=true
            FIX_TYPE="No fix"
            VULNERABLE_LIB_VERSION_FIX=
          elif [[ $LINE == "introduced by"* ]]
          then
            VULNERABLE_LIB=$(echo "${LINE}" | awk -F 'introduced by ' '{print $2}' | awk -F '@' '{print $1}')
            VULNERABLE_LIB_VERSION=$(echo "${LINE}" | awk -F '@' '{print $2}' | awk '{print $1}')
            if [[ $ISSUES_WITH_NO_DIRECT_UPGRADE = false ]]
            then
              echo "${VULNERABLE_LIB},${VULNERABILITY_TYPE},${VULNERABILITY_SEVERITY},${VULNERABLE_LIB_VERSION},${VULNERABLE_LIB_VERSION_FIX},${FIX_TYPE},${VULNERABILITY_SNYK_LINK}" >> $REPORT_FILE_NAME
            fi
          elif [[ $LINE == "This issue was fixed in versions"* ]]
          then
            VULNERABLE_LIB_VERSION_FIX=$(echo "${LINE}" | awk -F 'This issue was fixed in versions: ' '{print $2}')
            VULNERABLE_LIB_VERSION_FIX=$(echo $VULNERABLE_LIB_VERSION_FIX | sed -r 's|,|;|g')
            FIX_TYPE="Explicity"
            echo "${VULNERABLE_LIB},${VULNERABILITY_TYPE},${VULNERABILITY_SEVERITY},${VULNERABLE_LIB_VERSION},${VULNERABLE_LIB_VERSION_FIX},${FIX_TYPE},${VULNERABILITY_SNYK_LINK}" >> $REPORT_FILE_NAME
          elif [[ $LINE == "No upgrade or patch available"* ]]
          then
            FIX_TYPE="No fix"
            VULNERABLE_LIB_VERSION_FIX=
            echo "${VULNERABLE_LIB},${VULNERABILITY_TYPE},${VULNERABILITY_SEVERITY},${VULNERABLE_LIB_VERSION},${VULNERABLE_LIB_VERSION_FIX},${FIX_TYPE},${VULNERABILITY_SNYK_LINK}" >> $REPORT_FILE_NAME
          fi
          ((LINE_NUM++))
        done < snyk-results.txt
        cat $REPORT_FILE_NAME
        cat snyk-results.txt
    - name: Upload Cypress results
      uses: actions/upload-artifact@v3
      with:
        name: snyk-report
        path: scan-prj/*.csv